version: 2.1
orbs:
  ruby: circleci/ruby@0.1.2
  cypress: cypress-io/cypress@1.26.0
  browser-tools: circleci/browser-tools@1.4.4
defaults: &defaults
  working_directory: ~/web
  docker:
    - image: cimg/ruby:3.1.3-browsers
      environment:
        RAILS_ENV: development
        PGHOST: 127.0.0.1
        PGUSER: root
        NODE_OPTIONS: --openssl-legacy-provider --max_old_space_size=4096
    - image: cimg/postgres:9.6
      environment:
        POSTGRES_USER: root
        POSTGRES_DB: sf_dahlia
    - image: "cypress/base:14.15.0"
  executor: ruby/default
non_production_jobs: &non_production_jobs
  filters:
    branches:
      ignore: production
  requires:
    - build
angular_jobs: &angular_jobs
  filters:
    branches:
      only:
        - /^angular.*$/
        - main
  requires:
    - build
prod_and_release_jobs: &prod_and_release_jobs
  context: webapp-prod
  requires:
    - build
  filters:
    branches:
      only:
        - /^release.*$/
        - /^hotfix.*$/
        - production
aliases:
  - &attach_workspace
    attach_workspace:
      at: ~/web
  - &restore_yarn_cache
    restore_cache:
      name: Restore Yarn Cache
      keys:
        - webapp-{{ .Environment.CACHE_VERSION }}-yarn-packages-{{ .Branch }}-{{ checksum "yarn.lock" }}
        - webapp-{{ .Environment.CACHE_VERSION }}-yarn-packages-{{ .Branch }}-
        - webapp-{{ .Environment.CACHE_VERSION }}-yarn-packages-main-
        - webapp-{{ .Environment.CACHE_VERSION }}-yarn-packages-
  - &restore_bundler_cache
    restore_cache:
      name: Restore Bundler Cache
      keys:
        - webapp-{{ .Environment.CACHE_VERSION }}-bundle-dependencies-{{ .Branch }}-{{ checksum "Gemfile.lock" }}
        - webapp-{{ .Environment.CACHE_VERSION }}-bundle-dependencies-{{ .Branch }}-
        - webapp-{{ .Environment.CACHE_VERSION }}-bundle-dependencies-main-
        - webapp-{{ .Environment.CACHE_VERSION }}-bundle-dependencies-
commands:
  prepare_workspace:
    description: "Attach workspace and restore cache"
    steps:
      - *attach_workspace
      - *restore_yarn_cache
      - *restore_bundler_cache
  install-node:
    description: "install node"
    steps:
      - run:
          command: |
            set +e
            touch $BASH_ENV
            curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.5/install.sh | bash
            echo 'export NVM_DIR="$HOME/.nvm"' >> $BASH_ENV
            echo '[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"' >> $BASH_ENV
            echo 'nvm install v18.12.1' >> $BASH_ENV
            echo 'nvm alias default v18.12.1' >> $BASH_ENV
      - run: |
          curl -o- -L https://yarnpkg.com/install.sh | bash
          echo 'export PATH="$HOME/.yarn/bin:$HOME/.config/yarn/global/node_modules/.bin:$PATH"' >> $BASH_ENV
      - run: yarn install
  setup-webdriver:
    description: "Setup webdriver for e2e tests"
    steps:
      - browser-tools/install-chrome:
          chrome-version: 116.0.5845.96
          replace-existing: true
      - browser-tools/install-chromedriver
      - run:
          command: |
            google-chrome --version
            chromedriver --version
          name: Check install
      - run:
          command: |
            ./node_modules/protractor/bin/webdriver-manager clean
            ./node_modules/protractor/bin/webdriver-manager update --versions.chrome 2.41 --versions.standalone 3.141.59
            ./node_modules/protractor/bin/webdriver-manager status
  upgrade-bundler:
    description: Upgrade bundler
    steps:
      - run: gem update --system
      - run: gem install bundler
  setup:
    description: "Basic setup"
    steps:
      - checkout
      - prepare_workspace
      - upgrade-bundler
      - run: bundle --path vendor/bundle
      - run: bundle exec rails db:migrate
  start-server:
    description: "Start Rails server in background"
    steps:
      - setup-webdriver
      - run:
          name: Run rails server in background
          command: bundle exec rails server -p 3000
          background: true
      - run:
          name: Wait for server
          command: |
            until $(curl --retry 10 --output /dev/null --silent --head --fail http://127.0.0.1:3000); do
                printf '.'
                sleep 5
            done
  run-e2e-tests-for-path:
    description: Start a rails server and run specified e2e tests
    parameters:
      path:
        type: string
        default: "./spec/e2e/test-feature-path.feature"
    steps:
      - setup
      - start-server
      - run: yarn run protractor spec/e2e/conf.js --specs '<< parameters.path >>'

jobs:
  build:
    <<: *defaults
    steps:
      - checkout
      - prepare_workspace
      - install-node
      - save_cache:
          name: Save Yarn Package Cache
          key: webapp-{{ .Environment.CACHE_VERSION }}-yarn-packages-{{ .Branch }}-{{ checksum "yarn.lock" }}
          paths:
            - node_modules/
            - /home/circleci/.cache/Cypress
      - upgrade-bundler
      - run:
          name: Bundle install
          command: |
            sudo apt-get install pkg-config
            bundle config build.nokogiri --use-system-libraries
            bundle install --deployment --path vendor/bundle
      - save_cache:
          name: Save Bundle cache
          key: webapp-{{ .Environment.CACHE_VERSION }}-bundle-dependencies-{{ .Branch }}-{{ checksum "Gemfile.lock" }}
          paths:
            - ~/web/vendor/bundle
      - run: bundle exec rake db:setup
      - run: bundle exec rake db:test:prepare
      - run: bundle exec rake db:migrate
      - run:
          name: Download cc-test-reporter
          command: |
            mkdir -p tmp/
            curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./tmp/cc-test-reporter
            chmod +x ./tmp/cc-test-reporter
            ./tmp/cc-test-reporter before-build
      - persist_to_workspace:
          root: .
          paths:
            - .
  lint:
    <<: *defaults
    steps:
      - setup
      - run: yarn lint
  unit-react:
    <<: *defaults
    steps:
      - setup
      - run: yarn cache clean
      - run: yarn install
      - run: yarn test
      # path configured in jest.config.js as <rootDir>/<coverageDirectory>
      - store_artifacts:
          path: app/javascript/test-coverage
      - persist_to_workspace:
          root: .
          paths:
            - app/javascript/test-coverage
  unit-rspec:
    <<: *defaults
    steps:
      - setup
      - run: wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
      - run: sudo apt-get update -y
      - run: sudo apt-get install graphicsmagick
      - run: RAILS_ENV=test bundle exec rails db:create
      - run: RAILS_ENV=test bundle exec rails db:test:prepare
      - run: bundle exec rake spec
      - store_artifacts:
          path: coverage
      - persist_to_workspace:
          root: .
          paths:
            - coverage
  unit-angular:
    <<: *defaults
    steps:
      - setup
      - run:
          name: OpenSSL workaround for PhantomJS
          command: echo "export OPENSSL_CONF=/etc/ssl/" >> $BASH_ENV
      - run: RAILS_ENV=test bundle exec rails db:create
      - run: RAILS_ENV=test bundle exec rails db:test:prepare
      - run: yarn install
      - run: bundle exec rake jasmine:ci
  e2e:
    <<: *defaults
    environment:
      SIGN_IN_PAGE_REACT: "true"
    steps:
      - setup
      - start-server
      - run: yarn test:e2e
  coverage:
    <<: *defaults
    steps:
      - checkout
      - *attach_workspace
      - run: ./tmp/cc-test-reporter format-coverage -t lcov -o tmp/codeclimate.unit-react.json app/javascript/test-coverage/lcov.info
      - run: ./tmp/cc-test-reporter format-coverage -t simplecov -o tmp/codeclimate.unit-rspec.json coverage/coverage.json
      - run: ./tmp/cc-test-reporter sum-coverage tmp/codeclimate.*.json -p 2 -o tmp/codeclimate.total.json
      - run: ./tmp/cc-test-reporter upload-coverage -i tmp/codeclimate.total.json
      - persist_to_workspace:
          root: .
          paths:
            - tmp/codeclimate.*.json
  e2e-legacy:
    <<: *defaults
    parallelism: 4
    steps:
      - setup
      - start-server
      - run:
          name: Run e2e tests using test splitting
          command: |
            TESTFILES=$(circleci tests glob "spec/e2e/features/**/*.feature" | circleci tests split --split-by=timings)
            LIST=$(echo $TESTFILES | awk '{ gsub(" ", ",") ; system( "echo "  $0) }')
            echo $LIST
            npm run protractor -- --specs $LIST
  cleanup-test-data:
    <<: *defaults
    steps:
      - setup
      - run: bundle exec rails tests:e2e_cleanup
  waiter:
    # This is workaround that lets us to run a job after all other jobs in the workflow are complete, regardless of prior jobs' success or failure.
    # The waiter job uses a user's personal api token (CCI_TOKEN) to ping the circleci api every 5 seconds.
    # CCI_TOKEN is a personal circleci token generated in the circle ci account ui that has been added as an environment variable for the project.
    # The api request checks every 5 seconds if jobs are still running for this workflow until it receives the response that all jobs are finished.
    # After the waiter job finishes, jobs that require waiter to complete will run.
    docker:
      - image: cimg/node:current
    steps:
      - run: |
          while [[ $(curl --location --request GET "https://circleci.com/api/v2/workflow/$CIRCLE_WORKFLOW_ID/job" --header "Circle-Token: $CCI_TOKEN"| jq -r '.items[]|select(.name != "waiter")|.status' | grep -c "running") -gt 0 ]]
            do
              sleep 5
            done
      - run: echo "All required jobs have now completed"
workflows:
  version: 2.1
  build-and-deploy:
    jobs:
      - build
      # - lint:
      #     <<: *non_production_jobs
      # - unit-react:
      #     <<: *non_production_jobs
      # - unit-rspec:
      #     <<: *non_production_jobs
      # - unit-angular:
      #     <<: *angular_jobs
      # - e2e:
      #     <<: *non_production_jobs
      # - coverage:
      #     <<: *non_production_jobs
      #     requires:
      #       - unit-rspec
      #       - unit-react
      - e2e-legacy:
          <<: *angular_jobs
      # - e2e:
      #     <<: *prod_and_release_jobs
      #     name: e2e-production
      # - e2e-legacy:
      #     <<: *prod_and_release_jobs
      #     name: e2e-production-legacy
      # - waiter:
      #     requires:
      #       - build
      # - cleanup-test-data:
      #     requires:
      #       - waiter